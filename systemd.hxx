
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __SYSTEMD_HXX__
#define __SYSTEMD_HXX__

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace login1
{

    class Manager_proxy
        : public ::DBus::InterfaceProxy
    {
        public:

            Manager_proxy()
                : ::DBus::InterfaceProxy("org.freedesktop.login1.Manager"){}

            /* properties exported by this interface */
            void PowerOff(const bool& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("PowerOff");
                ::DBus::Message ret = invoke_method (call);
            }

            void Reboot(const bool& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("Reboot");
                ::DBus::Message ret = invoke_method (call);
            }
    };

}

namespace systemd1
{
    class Unit_proxy
        : public ::DBus::InterfaceProxy
    {
        public:

            Unit_proxy()
                : ::DBus::InterfaceProxy("org.freedesktop.systemd1.Unit")
            {
            }

        public:

            /* properties exported by this interface */
            const std::string LoadState() {
                ::DBus::CallMessage call ;
                call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
                ::DBus::MessageIter wi = call.writer();
                const std::string interface_name = "org.freedesktop.systemd1.Unit";
                const std::string property_name  = "LoadState";
                wi << interface_name;
                wi << property_name;
                ::DBus::Message ret = this->invoke_method (call);
                ::DBus::MessageIter ri = ret.reader ();
                ::DBus::Variant argout;
                ri >> argout;
                return argout;
            };
            const std::string ActiveState() {
                ::DBus::CallMessage call ;
                call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
                ::DBus::MessageIter wi = call.writer();
                const std::string interface_name = "org.freedesktop.systemd1.Unit";
                const std::string property_name  = "ActiveState";
                wi << interface_name;
                wi << property_name;
                ::DBus::Message ret = this->invoke_method (call);
                ::DBus::MessageIter ri = ret.reader ();
                ::DBus::Variant argout;
                ri >> argout;
                return argout;
            };
            const std::string SubState() {
                ::DBus::CallMessage call ;
                call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
                ::DBus::MessageIter wi = call.writer();
                const std::string interface_name = "org.freedesktop.systemd1.Unit";
                const std::string property_name  = "SubState";
                wi << interface_name;
                wi << property_name;
                ::DBus::Message ret = this->invoke_method (call);
                ::DBus::MessageIter ri = ret.reader ();
                ::DBus::Variant argout;
                ri >> argout;
                return argout;
            };
    };

    class Manager_proxy
        : public ::DBus::InterfaceProxy
    {
        public:

            Manager_proxy()
                : ::DBus::InterfaceProxy("org.freedesktop.systemd1.Manager")
            {}

            ::DBus::Path GetUnit(const std::string& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("GetUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path GetUnitByPID(const uint32_t& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("GetUnitByPID");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path LoadUnit(const std::string& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("LoadUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path StartUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("StartUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            void EnableUnitFiles(const std::vector< std::string >& argin0, const bool& argin1, const bool& argin2, bool& argout0, std::vector< ::DBus::Struct< std::string, std::string, std::string > >& argout1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                wi << argin2;
                call.member("EnableUnitFiles");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ri >> argout0;
                ri >> argout1;
            }

            void DisableUnitFiles(const std::vector< std::string >& argin0, const bool& argin1, std::vector< ::DBus::Struct< std::string, std::string, std::string > >& argout0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("DisableUnitFiles");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ri >> argout0;
            }

            ::DBus::Path StopUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("StopUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path ReloadUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("ReloadUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path RestartUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("RestartUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            void Reload()
            {
                ::DBus::CallMessage call;
                call.member("Reload");
                ::DBus::Message ret = invoke_method (call);
            }
    };
}


class SystemD : public systemd1::Manager_proxy,
    public DBus::IntrospectableProxy,
    public DBus::ObjectProxy
{
    public:
        SystemD(DBus::Connection con, const char *path, const char *name) : DBus::ObjectProxy(con, path, name) {};

};

class LoginD : public login1::Manager_proxy,
    public DBus::IntrospectableProxy,
    public DBus::ObjectProxy
{
    public:
        LoginD(DBus::Connection con, const char *path, const char *name) : DBus::ObjectProxy(con, path, name) {};

};

namespace systemd
{
    class unit : public systemd1::Unit_proxy,
    public DBus::IntrospectableProxy,
    public DBus::ObjectProxy
    {
        public:
            unit(DBus::Connection con, const char *path, const char *name) : DBus::ObjectProxy(con, path, name) {};
    };

    class login_manager
    {
        private:
            const char *path = "org/freedesktop/login1";
            const char *name = "org.freedesktop.login1";
            DBus::BusDispatcher dispatcher;
            DBus::Connection con;
            LoginD logind;

            DBus::Connection SetDispatcher(DBus::BusDispatcher &dispatcher)
            {
                DBus::default_dispatcher = &dispatcher;
                return DBus::Connection::SystemBus();
            }

        public:
            login_manager(): con(SetDispatcher(dispatcher)), logind(con, path, name) {};

            void PowerOff()
            {
                logind.PowerOff(false);
            }

            void Reboot()
            {
                logind.Reboot(false);
            }

    };

    class manager
    {
        private:
            const char *path = "/org/freedesktop/systemd1";
            const char *name = "org.freedesktop.systemd1";
            DBus::BusDispatcher dispatcher;
            DBus::Connection con;
            SystemD systemd;

            DBus::Connection SetDispatcher(DBus::BusDispatcher &dispatcher)
            {
                DBus::default_dispatcher = &dispatcher;
                return DBus::Connection::SystemBus();
            }

        public:
            manager(): con(SetDispatcher(dispatcher)), systemd(con, path, name) {};

            unit GetUnit(const std::string &service_name)
            {
                return unit(con, systemd.GetUnit(service_name).c_str(), name);
            }

            unit LoadUnit(const std::string &service_name)
            {
                return unit(con, systemd.LoadUnit(service_name).c_str(), name);
            }

            DBus::Path StartUnit(const std::string &service_name, const std::string &mode)
            {
                return systemd.StartUnit(service_name, mode);
            }

            DBus::Path StopUnit(const std::string &service_name, const std::string &mode)
            {
                return systemd.StopUnit(service_name, mode);
            }

            DBus::Path RestartUnit(const std::string &service_name, const std::string &mode)
            {
                return systemd.RestartUnit(service_name, mode);
            }

            DBus::Path ReloadUnit(const std::string &service_name, const std::string &mode)
            {
                return systemd.ReloadUnit(service_name, mode);
            }

            bool EnableUnit(const std::string &service_name)
            {
                std::vector<std::string> services{service_name};
                bool retval;
                std::vector< ::DBus::Struct< std::string, std::string, std::string > > retvector;

                systemd.EnableUnitFiles(services, false, false, retval, retvector);

                return retval;
            }

            bool DisableUnit(const std::string &service_name)
            {
                std::vector<std::string> services{service_name};

                std::vector< ::DBus::Struct< std::string, std::string, std::string > > retvector;

                systemd.DisableUnitFiles(services, false, retvector);

                if(retvector.size() != 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            void DaemonReload()
            {
                systemd.Reload();
            }
    };
}
#endif //__SYSTEMD__
