
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __SYSTEMD_HXX__
#define __SYSTEMD_HXX__

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace systemd1
{


    class Unit_proxy
        : public ::DBus::InterfaceProxy
    {
        public:

            Unit_proxy()
                : ::DBus::InterfaceProxy("org.freedesktop.systemd1.Unit")
            {
            }

        public:

            /* properties exported by this interface */
            const std::string LoadState() {
                ::DBus::CallMessage call ;
                call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
                ::DBus::MessageIter wi = call.writer();
                const std::string interface_name = "org.freedesktop.systemd1.Unit";
                const std::string property_name  = "LoadState";
                wi << interface_name;
                wi << property_name;
                ::DBus::Message ret = this->invoke_method (call);
                ::DBus::MessageIter ri = ret.reader ();
                ::DBus::Variant argout;
                ri >> argout;
                return argout;
            };
            const std::string ActiveState() {
                ::DBus::CallMessage call ;
                call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
                ::DBus::MessageIter wi = call.writer();
                const std::string interface_name = "org.freedesktop.systemd1.Unit";
                const std::string property_name  = "ActiveState";
                wi << interface_name;
                wi << property_name;
                ::DBus::Message ret = this->invoke_method (call);
                ::DBus::MessageIter ri = ret.reader ();
                ::DBus::Variant argout;
                ri >> argout;
                return argout;
            };
            const std::string SubState() {
                ::DBus::CallMessage call ;
                call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
                ::DBus::MessageIter wi = call.writer();
                const std::string interface_name = "org.freedesktop.systemd1.Unit";
                const std::string property_name  = "SubState";
                wi << interface_name;
                wi << property_name;
                ::DBus::Message ret = this->invoke_method (call);
                ::DBus::MessageIter ri = ret.reader ();
                ::DBus::Variant argout;
                ri >> argout;
                return argout;
            };
    };

    class Manager_proxy
        : public ::DBus::InterfaceProxy
    {
        public:

            Manager_proxy()
                : ::DBus::InterfaceProxy("org.freedesktop.systemd1.Manager")
            {}

        public:

            /* properties exported by this interface */
            const std::vector< std::string > UnitPath() {
                ::DBus::CallMessage call ;
                call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
                ::DBus::MessageIter wi = call.writer();
                const std::string interface_name = "org.freedesktop.systemd1.Manager";
                const std::string property_name  = "UnitPath";
                wi << interface_name;
                wi << property_name;
                ::DBus::Message ret = this->invoke_method (call);
                ::DBus::MessageIter ri = ret.reader ();
                ::DBus::Variant argout;
                ri >> argout;
                return argout;
            };
            const std::string ControlGroup() {
                ::DBus::CallMessage call ;
                call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
                ::DBus::MessageIter wi = call.writer();
                const std::string interface_name = "org.freedesktop.systemd1.Manager";
                const std::string property_name  = "ControlGroup";
                wi << interface_name;
                wi << property_name;
                ::DBus::Message ret = this->invoke_method (call);
                ::DBus::MessageIter ri = ret.reader ();
                ::DBus::Variant argout;
                ri >> argout;
                return argout;
            };
            const std::string SystemState() {
                ::DBus::CallMessage call ;
                call.member("Get"); call.interface("org.freedesktop.DBus.Properties");
                ::DBus::MessageIter wi = call.writer();
                const std::string interface_name = "org.freedesktop.systemd1.Manager";
                const std::string property_name  = "SystemState";
                wi << interface_name;
                wi << property_name;
                ::DBus::Message ret = this->invoke_method (call);
                ::DBus::MessageIter ri = ret.reader ();
                ::DBus::Variant argout;
                ri >> argout;
                return argout;
            };

        public:

            /* methods exported by this interface,
             * this functions will invoke the corresponding methods on the remote objects
             */
            ::DBus::Path GetUnit(const std::string& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("GetUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path GetUnitByPID(const uint32_t& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("GetUnitByPID");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path LoadUnit(const std::string& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("LoadUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path StartUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("StartUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path StartUnitReplace(const std::string& argin0, const std::string& argin1, const std::string& argin2)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                wi << argin2;
                call.member("StartUnitReplace");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path StopUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("StopUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path ReloadUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("ReloadUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path RestartUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("RestartUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path TryRestartUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("TryRestartUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path ReloadOrRestartUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("ReloadOrRestartUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            ::DBus::Path ReloadOrTryRestartUnit(const std::string& argin0, const std::string& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("ReloadOrTryRestartUnit");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                ::DBus::Path argout;
                ri >> argout;
                return argout;
            }

            void KillUnit(const std::string& argin0, const std::string& argin1, const int32_t& argin2)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                wi << argin2;
                call.member("KillUnit");
                ::DBus::Message ret = invoke_method (call);
            }

            void ResetFailedUnit(const std::string& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("ResetFailedUnit");
                ::DBus::Message ret = invoke_method (call);
            }

            std::vector< ::DBus::Struct< std::string, uint32_t, std::string > > GetUnitProcesses(const std::string& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("GetUnitProcesses");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                std::vector< ::DBus::Struct< std::string, uint32_t, std::string > > argout;
                ri >> argout;
                return argout;
            }

            void ResetFailed()
            {
                ::DBus::CallMessage call;
                call.member("ResetFailed");
                ::DBus::Message ret = invoke_method (call);
            }

            std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > ListUnits()
            {
                ::DBus::CallMessage call;
                call.member("ListUnits");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > argout;
                ri >> argout;
                return argout;
            }

            std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > ListUnitsFiltered(const std::vector< std::string >& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("ListUnitsFiltered");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > argout;
                ri >> argout;
                return argout;
            }

            std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > ListUnitsByPatterns(const std::vector< std::string >& argin0, const std::vector< std::string >& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("ListUnitsByPatterns");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > argout;
                ri >> argout;
                return argout;
            }

            std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > ListUnitsByNames(const std::vector< std::string >& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("ListUnitsByNames");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, ::DBus::Path, uint32_t, std::string, ::DBus::Path > > argout;
                ri >> argout;
                return argout;
            }

            void Reload()
            {
                ::DBus::CallMessage call;
                call.member("Reload");
                ::DBus::Message ret = invoke_method (call);
            }

            void Reexecute()
            {
                ::DBus::CallMessage call;
                call.member("Reexecute");
                ::DBus::Message ret = invoke_method (call);
            }

            void Exit()
            {
                ::DBus::CallMessage call;
                call.member("Exit");
                ::DBus::Message ret = invoke_method (call);
            }

            void Reboot()
            {
                ::DBus::CallMessage call;
                call.member("Reboot");
                ::DBus::Message ret = invoke_method (call);
            }

            void PowerOff()
            {
                ::DBus::CallMessage call;
                call.member("PowerOff");
                ::DBus::Message ret = invoke_method (call);
            }

            std::vector< ::DBus::Struct< std::string, std::string > > ListUnitFiles()
            {
                ::DBus::CallMessage call;
                call.member("ListUnitFiles");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                std::vector< ::DBus::Struct< std::string, std::string > > argout;
                ri >> argout;
                return argout;
            }

            std::vector< ::DBus::Struct< std::string, std::string > > ListUnitFilesByPatterns(const std::vector< std::string >& argin0, const std::vector< std::string >& argin1)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                wi << argin1;
                call.member("ListUnitFilesByPatterns");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                std::vector< ::DBus::Struct< std::string, std::string > > argout;
                ri >> argout;
                return argout;
            }

            std::string GetUnitFileState(const std::string& argin0)
            {
                ::DBus::CallMessage call;
                ::DBus::MessageIter wi = call.writer();

                wi << argin0;
                call.member("GetUnitFileState");
                ::DBus::Message ret = invoke_method (call);
                ::DBus::MessageIter ri = ret.reader();

                std::string argout;
                ri >> argout;
                return argout;
            }
    };

}



class SystemD : public systemd1::Manager_proxy,
    public DBus::IntrospectableProxy,
    public DBus::ObjectProxy
{
    public:
        SystemD(DBus::Connection con, const char *path, const char *name) : DBus::ObjectProxy(con, path, name) {};

};

namespace systemd
{
    class unit : public systemd1::Unit_proxy,
    public DBus::IntrospectableProxy,
    public DBus::ObjectProxy
    {
        public:
            unit(DBus::Connection con, const char *path, const char *name) : DBus::ObjectProxy(con, path, name) {};
    };

    class manager
    {
        private:
            const char *path = "/org/freedesktop/systemd1";
            const char *name = "org.freedesktop.systemd1";
            DBus::BusDispatcher dispatcher;
            DBus::Connection con;
            SystemD systemd;

            DBus::Connection SetDispatcher(DBus::BusDispatcher &dispatcher)
            {
                DBus::default_dispatcher = &dispatcher;
                return DBus::Connection::SystemBus();
            }

        public:
            manager(): con(SetDispatcher(dispatcher)), systemd(con, path, name) {};

            unit GetUnit(const std::string &service_name)
            {
                return unit(con, systemd.GetUnit(service_name).c_str(), name);
            }

            unit LoadUnit(const std::string &service_name)
            {
                return unit(con, systemd.LoadUnit(service_name).c_str(), name);
            }

            DBus::Path StartUnit(const std::string &service_name, const std::string &mode)
            {
                return systemd.StartUnit(service_name, mode);
            }

            DBus::Path StopUnit(const std::string &service_name, const std::string &mode)
            {
                return systemd.StopUnit(service_name, mode);
            }

            DBus::Path RestartUnit(const std::string &service_name, const std::string &mode)
            {
                return systemd.RestartUnit(service_name, mode);
            }

            DBus::Path ReloadUnit(const std::string &service_name, const std::string &mode)
            {
                return systemd.ReloadUnit(service_name, mode);
            }

            void PowerOff()
            {
                return systemd.PowerOff();
            }

            void Reboot()
            {
                return systemd.Reboot();
            }
    };
}
#endif //__SYSTEMD__
